cancel.t.sol
├── when the call is a delegate call
│  └── it should revert
└── when the call is not a delegate call
   ├── when the stream is not active
   │  ├── when the stream is null
   │  │  └── it should revert
   │  ├── when the stream is canceled
   │  │  └── it should revert
   │  └── when the stream is depleted
   │     └── it should revert
   └── when the stream is active
      ├── when the stream is non-cancelable
      │  └── it should revert
      └── when the stream is cancelable
         ├── when the caller is unauthorized
         │  ├── when the caller is a malicious third-party
         │  │  └── it should revert
         │  ├── when the caller is an approved operator
         │  │  └── it should revert
         │  └── when the caller is a former recipient
         │     └── it should revert
         └── when the caller is authorized
            ├── when the caller is the sender
            │  ├── when the recipient is not a contract
            │  │  └── it should cancel the stream
            │  └── when the recipient is a contract
            │     ├── when the recipient does not implement the hook
            │     │  └── it should cancel the stream, call the recipient hook, and ignore the revert
            │     └── when the recipient implements the hook
            │        ├── when the recipient reverts
            │        │  └── it should cancel the stream, call the recipient hook, and ignore the revert
            │        └── when the recipient does not revert
            │           ├── when there is reentrancy
            │           │  └── it should cancel the stream, call the recipient hook, and ignore the revert
            │           └── when there is no reentrancy
            │              └── it should cancel the stream, update the withdrawn amount, perform the ERC-20 transfers, call the recipient hook, and emit a {CancelLockupStream} event
            └── when the caller is the recipient
               ├── when the sender is not a contract
               │  └── it should cancel the stream
               └── when the sender is a contract
               ├── when the sender does not implement the hook
               │  └── it should cancel the stream, call the sender hook, and ignore the revert
               └── when the sender implements the hook
                     ├── when the sender reverts
                     │  └── it should cancel the stream, call the sender hook, and ignore the revert
                     └── when the sender does not revert
                        ├── when there is reentrancy
                        │  └── it should cancel the stream, call the sender hook, and ignore the revert
                        └── when there is no reentrancy
                           └── it should cancel the stream, update the withdrawn amount, perform the ERC-20 transfers, call the sender hook, and emit a {CancelLockupStream} event
