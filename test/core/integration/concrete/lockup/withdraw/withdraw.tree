Withdraw_Integration_Concrete_Test
├── when delegate call
│  └── it should revert
└── when no delegate call
   ├── given null
   │  └── it should revert
   └── given not null
      ├── given status is "DEPLETED"
      │  └── it should revert
      └── given status is not "DEPLETED"
         ├── when withdrawal address is zero
         │  └── it should revert
         └── when withdrawal address is not zero
            ├── when withdraw amount is zero
            │  └── it should revert
            └── when withdraw amount is not zero
               ├── when withdraw amount overdraws
               │  └── it should revert
               └── when withdraw amount does not overdraw
                  ├── when withdrawal address is not recipient
                  │  ├── when caller is not approved third party or recipient
                  │  │  └── it should revert
                  │  └── when caller is approved third party or recipient
                  │     ├── it should make the withdrawal
                  │     ├── it should update the withdrawn amount
                  │     └── it should emit {WithdrawFromLockupStream} and {MetadataUpdate} events
                  └── when withdrawal address is recipient
                     ├── when caller is unknown
                     │  ├── it should make the withdrawal
                     │  └── it should update the withdrawn amount
                     ├── when caller is recipient
                     │  ├── it should make the withdrawal
                     │  └── it should update the withdrawn amount
                     └── when caller is sender
                        ├── given the end time is not in the future
                        │  ├── it should make the withdrawal
                        │  ├── it should mark the stream as depleted
                        │  └── it should make the stream not cancelable
                        └── given end time in future
                           ├── given canceled stream
                           │  ├── it should make the withdrawal
                           │  ├── it should mark the stream as depleted
                           │  ├── it should update the withdrawn amount
                           │  └── it should emit {WithdrawFromLockupStream} and {MetadataUpdate} events
                           └── given not canceled stream
                              ├── given recipient is not allowed to hook
                              │  ├── it should make the withdrawal
                              │  ├── it should update the withdrawn amount
                              │  └── it should not make Sablier run the recipient hook
                              └── given recipient is allowed to hook
                                 ├── when recipient reverts
                                 │  └── it should revert
                                 └── when recipient does not revert
                                    ├── when recipient hook returns invalid selector
                                    │  └── it should revert
                                    └── when recipient hook returns valid selector
                                       ├── when reentrancy
                                       │  ├── it should make multiple withdrawals
                                       │  ├── it should update the withdrawn amounts
                                       │  └── it should make Sablier run the recipient hook
                                       └── when no reentrancy
                                          ├── it should make the withdrawal
                                          ├── it should update the withdrawn amount
                                          ├── it should make Sablier run the recipient hook
                                          └── it should emit {WithdrawFromLockupStream} and {MetadataUpdate} events
